image: docker:latest

stages:
  - build
  - deploy

variables:
  IMAGE_TAG: 204934624744.dkr.ecr.ap-southeast-1.amazonaws.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:dev
#  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]

build:
  tags:
    - af_frontend_dev
  stage: build
  allow_failure: false
  script:
    - echo 'script for building on DEV branch'
    - pwd
    - cp $ENV_DEV $CI_PROJECT_DIR/.env.production
    - ls
    - docker build -t af_frontend_dev_image:v1.0 .
    - echo 'stop container...'
    - docker stop af_frontend_dev_container || true && docker rm af_frontend_dev_container || true
    - git log --oneline -10
    - echo 'start deploying...'
    - docker run -d -p 5009:80 --name af_frontend_dev_container af_frontend_dev_image:v1.0
    - echo 'BUILDINGGGG SUCCESSFULY'
  only:
    - develop
    - /^dev-.*$/

build_staging:
  stage: build
  allow_failure: false
  tags:
    - af_frontend_staging
  environment:
    name: staging
  script:
    - echo 'script for building on STAGING branch'
    - pwd
    - cp $ENV_STAGING $CI_PROJECT_DIR/.env.production
    - ls
    - docker build -t af_frontend_image:v1.0 .
    - echo 'stop container...'
    - docker stop af_frontend_container || true && docker rm af_frontend_container || true
    - git log --oneline -10
    - echo 'start deploying...'
    - docker run -d -p 5009:80 --name af_frontend_container af_frontend_image:v1.0
    - echo 'BUILDINGGGG SUCCESSFULY'
  only:
    - staging
    - /^staging-/


build_prod:
  stage: build
  when: manual
  allow_failure: false
  environment:
    name: production
  variables:
    DOCKER_HOST: tcp://docker:2375/
  script:
    - apk add --no-cache curl jq python2 py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region ap-southeast-1)
    - echo "Building image:"
    - TIMESTAMP=$(echo $CI_COMMIT_TIMESTAMP | sed $'s/[^[:alnum:]\t]//g')
    - VERSION=version-${TIMESTAMP:0:8}-$CI_COMMIT_SHORT_SHA
    - IMAGE_TAG=204934624744.dkr.ecr.ap-southeast-1.amazonaws.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION
    - IMAGE_TAG_CURRENT=204934624744.dkr.ecr.ap-southeast-1.amazonaws.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:CURRENT
    - echo $IMAGE_TAG
    - docker pull $IMAGE_TAG_CURRENT || echo "Building runtime from scratch"
    - >
      docker build
      --cache-from $IMAGE_TAG_CURRENT
      -t $IMAGE_TAG -t $IMAGE_TAG_CURRENT .
    - docker push $IMAGE_TAG
    - docker push $IMAGE_TAG_CURRENT
  only:
    - /^release-/

.deploy_template:
  stage: deploy
  image: pstauffer/curl
  script:
    - echo $GITLAB_USER_NAME
    - echo $CI_COMMIT_MESSAGE
    - |
        if [ "$DEPLOY_BRANCH" = "production" ]; then
            TIMESTAMP=$(echo $CI_COMMIT_TIMESTAMP | sed $'s/[^[:alnum:]\t]//g')
            APP_IMAGE_TAG=version-${TIMESTAMP:0:8}-$CI_COMMIT_SHORT_SHA
        fi
    - echo $APP_IMAGE_TAG
    - >
      curl -G --compressed -sS
      --data-urlencode "project=${CI_PROJECT_NAMESPACE}"
      --data-urlencode "user=${GITLAB_USER_NAME}"
      --data-urlencode "commit_message=${CI_COMMIT_MESSAGE}"
      -H 'Connection: keep-alive'
      "${WEBHOOKD_URL}?application=${CI_PROJECT_NAME}&branch=${DEPLOY_BRANCH}&commit=${CI_COMMIT_SHA}&version=$VERSION&app_branch=$APP_IMAGE_TAG"
      &> /dev/stdout | tee -a /tmp/status
    - grep -q "Patching done!" /tmp/status; [ $? -eq 0 ] && exit 0 || exit 1

deploy_dev:
  tags:
    - af_frontend_dev
  stage: deploy
  environment:
    name: development
  variables:
    DEPLOY_BRANCH: develop
    APP_IMAGE_TAG: dev
    WEBHOOKD_URL: http://system-webhook-service:8080/deploy
    VERSION: v1.0
  script:
    - echo 'script for deploying on DEV branch'
    - echo 'DEPLOYED SUCCESSFULLY'
  only:
    - develop
    - /^dev-.*$/

deploy_staging:
  tags:
    - af_frontend_staging
  stage: deploy
  environment:
    name: staging
  script:
    - echo 'script for deploying on STAGING branch'
    - echo 'DEPLOYED SUCCESSFULLY'
  only:
    - staging
    - /^staging-.*$/

deploy_production:
  extends: .deploy_template
  environment:
    name: production
  variables:
    DEPLOY_BRANCH: production
    APP_IMAGE_TAG: production
    WEBHOOKD_URL: http://system-webhook-service:8080/deploy
    VERSION: v1.0
    DOCKER_HOST: tcp://docker:2375/
  only:
    - production
    - /^release-.*$/
